∇  tris←l cube r
 ;p ⍝ (p)oints
 ;F;B;L;R;U;D ⍝ Each describes a face, (F)ront, (B)ack, (L)eft...

 p←(⊂r)∘.+↓⍉(2⊥⍣¯1⊢)1-⍨⍳8 ⍝ Generates the vertices

 F←(⊂3 5 1 7)⌷p
 B←(⊂2 6 4 8)⌷p
 L←(⊂1 2 3 4)⌷p
 R←(⊂6 5 8 7)⌷p
 U←(⊂7 3 8 4)⌷p
 D←(⊂1 5 2 6)⌷p
 ⍝ The tris are triangluar loops, that is, they are 4 elements but the
 ⍝ First and last element are copies, so the lines drawn between them connect
 ⍝ To form a closed triangular polygon.
 tris←l×10×¯0.5+,↑{(⊂3↑⍵),(⊂1↓⍵)}¨F B L R U D
 ∇

 ∇ out←l rot3d r;p;rx;ry;rz;t;sin;cos;Rx;Ry;Rz;offset
 p←r               ⍝ (p)oint being rotated
 rx ry rz←○l÷180   ⍝ axis (r)otations in radians
 t←0.000001        ⍝ (t)hreshold for rounding errors
 sin←1∘○ ⍝ Trig Aliases
 cos←2∘○
⍝ (R)otation Matrix for (x) axis
 Rx←3 3⍴(1 0 0 0,(cos rx),(-sin rx),0,(sin rx),(cos rx))
⍝ (R)otation Matrix for (y) axis
 Ry←3 3⍴((cos ry),0,(sin ry),0 1 0,(-sin ry),0,(cos ry))
⍝ (R)otation Matrix for (z) axis
 Rz←3 3⍴((cos rz),(-sin rz),0,(sin rz),(cos rz),0 0 0 1)
 offset←{(+/÷≢),↑⍵}p ⍝ calculates center of points given
 out←{offset+{Rz+.×Ry+.×Rx+.×⍵}¨⍵-offset}¨p ⍝ (o)utput point
 ∇

 ∇  res←l proj3d r;fov;asp;zn;zf;M;temp
 fov asp zn zf←l ⍝ extents (n)ear (f)ar (l)eft (r)ight (t)op (b)ottom
 M←4 4⍴0
 M[1;1]←asp×(÷3○fov÷2)
 M[2;2]←÷3○fov÷2
 M[3;3]←zf÷zf-zn
 M[3;4]←zf((-×⊢)÷-)zn
 M[4;3]←1
 res←{{3↑1000×(3↑⍵)÷⍵[4]}¨{M+.×⍵,1}¨⍵}¨r
 ∇

∇ out←t trans3d r
 out←{(⊂t)∘.+⍵}¨r
 ∇

∇ l move r
 tris←(⍎l)trans3d tris
∇

∇  l turn r
 tris←(⍎l)rot3d tris
∇

∇  l initG r;temp;len
 temp←{⍉2↑⍉↑⍵}¨r ⍝ Drops the z component and prepares for batch line drawing
 l ⎕WC'Poly'temp('FStyle'(len⍴0))('FillCol'cols)
∇

∇  l updateG r;temp;len
 temp←⌊⍤1¨{⍉2↑⍉↑⍵}¨r ⍝ Drops the z component and prepares for batch line drawing
 ⍝l ⎕WS('Points'(temp))
 l ⎕WC'Poly'temp('FStyle'(len⍴0))('FillCol'cols)
∇

∇update
 count+←1
 'F.Bitmap'⎕WS('CBits'((⌈sf×scr_w scr_h)⍴(0 0 0)))
 'F.Bitmap.Cube'updateG(sf×scr_w÷2)(sf×scr_h÷2)50 trans3d f proj3d((360|2×count)15 0)rot3d tris
∇

∇main;scr_x;scr_y;scr_w;scr_h;f;p;count;tris;cols
 scr_x scr_y←100 100
 scr_w scr_h←1024 1024
 sf←÷8
 count←0
 f←(100(scr_w÷scr_h)0.1 1000)
 'F'⎕WC'Form' '3D Cube'(scr_x scr_y)(scr_w scr_h)('Coord' 'Pixel')('OnTop' 1)
 'F.Bitmap'⎕WC'Bitmap'('CBits'((⌈sf×scr_w scr_h)⍴(0 0 0)))
 'F'⎕WS('Picture' 'F.Bitmap' 2)
 tris←(1 cube 0 0 75)
 cols←?(≢tris)⍴(⊂3⍴255)
 'F.Bitmap.Cube'initG(sf×scr_w÷2)(sf×scr_h÷2)50 trans3d f proj3d(45 45 0)rot3d tris
 'F.Mf'⎕WC'Button' 'Forward'(50 100)('Event' 'Select' 'move' '0 0 1')
 'F.Mb'⎕WC'Button' 'Back'(80 100)('Event' 'Select' 'move' '0 0 ¯1')
 'F.Ml'⎕WC'Button' 'Left'(70 60)('Event' 'Select' 'move' '¯1 0 0')
 'F.Mr'⎕WC'Button' 'Right'(70 180)('Event' 'Select' 'move' '1 0 0')
 'F.Mu'⎕WC'Button' 'Up'(20 100)('Event' 'Select' 'move' '0 ¯1 0')
 'F.Md'⎕WC'Button' 'Down'(110 100)('Event' 'Select' 'move' '0 1 0')
 'F.Rf'⎕WC'Button' 'R Z+'(750 100)('Event' 'Select' 'turn' '0 0 1')
 'F.Rb'⎕WC'Button' 'R Z-'(780 100)('Event' 'Select' 'turn' '0 0 ¯1')
 'F.Rl'⎕WC'Button' 'R X-'(770 60)('Event' 'Select' 'turn' '¯1 0 0')
 'F.Rr'⎕WC'Button' 'R X+'(770 180)('Event' 'Select' 'turn' '¯1 0 0')
 'F.Ru'⎕WC'Button' 'R Y+'(720 100)('Event' 'Select' 'turn' '0 1 0')
 'F.Rd'⎕WC'Button' 'R Y-'(810 100)('Event' 'Select' 'turn' '0 ¯1 0')
 'F.T'⎕WC'Timer'('Interval' 16)('Active' 1)('Timer' 'update')
 ⎕DQ'F'
∇

main

